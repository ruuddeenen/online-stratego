{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Activation = function () {\n  function Activation() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        onIsActiveChanged = _ref.onIsActiveChanged;\n\n    _classCallCheck(this, Activation);\n\n    if (typeof onIsActiveChanged !== 'function') {\n      throw new Error('onIsActiveChanged should be a function');\n    }\n\n    this.onIsActiveChanged = onIsActiveChanged;\n    this.isActive = false;\n    this.timers = [];\n  }\n\n  _createClass(Activation, [{\n    key: 'activate',\n    value: function activate() {\n      this.isActive = true;\n      this.onIsActiveChanged({\n        isActive: true\n      });\n    }\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n      this.isActive = false;\n      this.onIsActiveChanged({\n        isActive: false\n      });\n      this.clearTimers();\n    }\n  }, {\n    key: 'toggleActivation',\n    value: function toggleActivation() {\n      if (this.isActive) {\n        this.deactivate();\n      } else {\n        this.activate();\n      }\n    }\n  }, {\n    key: 'clearTimers',\n    value: function clearTimers() {\n      var timers = this.timers;\n\n      while (timers.length) {\n        var timer = timers.pop();\n        clearTimeout(timer.id);\n      }\n    }\n  }, {\n    key: 'clearTimer',\n    value: function clearTimer(timerName) {\n      this.timers.forEach(function (timer) {\n        if (timer.name === timerName) {\n          clearTimeout(timer.id);\n        }\n      });\n    }\n  }]);\n\n  return Activation;\n}();\n\nexport default Activation;","map":null,"metadata":{},"sourceType":"module"}