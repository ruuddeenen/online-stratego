{"version":3,"sources":["models/MessageModels.js","pages/Game.js","scripts/restHandler.js","pages/Login.js","pages/Lobby.js","pages/Register.js","pages/joinlobby.js","App.js","serviceWorker.js","index.js"],"names":["ConnectMessage","id","username","lobbyId","this","GameConnectMessage","color","GameStartMessage","playerList","canvasDimensions","stompClient","Game","props","connect","_this","socket","SockJS","Stomp","over","frame","console","log","toString","subscribe","message","onMessageRecieved","sendMessage","state","user","endPoint","send","JSON","stringify","toggle","mouseX","mouseY","ready","board","pawns","bind","getSessionStorage","getUser","getLobbyId","drawBoard","prevProps","prevState","snapshot","drawPawns","setState","parse","sessionStorage","getItem","context","document","getElementById","getContext","size","length","y","field","x","fillStyle","fillRect","msg","body","operation","fields","pawnList","e","nativeEvent","layerX","layerY","Math","floor","className","style","paddingBottom","fontSize","width","height","onMouseDown","handleMouseClick","onClick","Component","restUrl","createUrlToRestApi","location","parameters","values","url","push","i","join","Login","password","handleLogin","handleRegister","handleChangeUsername","handleChangePassword","setItem","response","ok","Error","statusText","fetch","then","res","json","data","window","alert","target","value","Form","backgroundColor","Group","Control","type","placeholder","autoComplete","onChange","Button","Lobby","receiver","forEach","player","createInfoBlockFromPlayer","paddingTop","startGame","Register","handleChangePasswordConf","toLogin","passwordConfirmation","JoinLobby","changeLobbyId","createLobby","joinLobby","toUpperCase","maxLength","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.d53dad9b.chunk.js","sourcesContent":["export class ConnectMessage {\r\n    constructor(id, username, lobbyId){\r\n        this.id = id;\r\n        this.username = username;\r\n        this.lobbyId = lobbyId;\r\n    }\r\n}\r\n\r\nexport class GameConnectMessage {\r\n    constructor(id, username, lobbyId, color){\r\n        this.id = id;\r\n        this.username = username;\r\n        this.lobbyId = lobbyId;\r\n        this.color = color;\r\n    };\r\n}\r\n\r\nexport class GameStartMessage {\r\n    constructor(lobbyId, playerList){\r\n        this.lobbyId = lobbyId;\r\n        this.playerList = playerList;\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport SockJS from \"sockjs-client\";\r\nimport * as Stomp from \"@stomp/stompjs\";\r\nimport { GameConnectMessage } from '../models/MessageModels';\r\n\r\nconst canvasDimensions = {\r\n    height: 800,\r\n    width: 1000\r\n};\r\n\r\nlet stompClient = null;\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            lobbyId: null,\r\n            color: null,\r\n            mouseX: 0,\r\n            mouseY: 0,\r\n            ready: false,\r\n            board: [],\r\n            pawns: []\r\n        };\r\n\r\n        // Bindings\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.onMessageRecieved = this.onMessageRecieved.bind(this);\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSessionStorage();\r\n        this.getUser();\r\n        this.getLobbyId();\r\n        this.connect();\r\n        this.drawBoard();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.board !== prevState.board) {\r\n            this.drawBoard();\r\n        }\r\n        if (this.state.pawns !== prevState.pawns) {\r\n            this.drawPawns();\r\n        }\r\n        console.log(this.state);\r\n    }\r\n\r\n    getSessionStorage() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user')),\r\n            lobbyId: sessionStorage.getItem('lobbyId'),\r\n            color: sessionStorage.getItem('color')\r\n        });\r\n    }\r\n    getUser() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user'))\r\n        });\r\n    }\r\n\r\n    getLobbyId() {\r\n        this.setState({\r\n            lobbyId: sessionStorage.getItem('lobbyId')\r\n        });\r\n    }\r\n\r\n    connect = () => {\r\n        const _this = this;\r\n        const socket = new SockJS('http://localhost:9000/ws');\r\n        stompClient = Stomp.Stomp.over(socket);\r\n        stompClient.connect({}, function (frame) {\r\n            console.log(frame.toString());\r\n            stompClient.subscribe('/topic/game', (message) => {\r\n                _this.onMessageRecieved(message);\r\n            });\r\n            _this.sendMessage('/app/game', new GameConnectMessage(\r\n                _this.state.user.id,\r\n                _this.state.user.username,\r\n                _this.state.lobbyId,\r\n                _this.state.color\r\n            ))\r\n        });\r\n    }\r\n\r\n\r\n    drawBoard() {\r\n        console.log('drawing board');\r\n        const canvas = document.getElementById('canvasBoard');\r\n        const context = canvas.getContext('2d');\r\n\r\n        const board = this.state.board;\r\n        const size = board.length;\r\n        for (var y = 0; y < size; y++) {\r\n            const field = board[y];\r\n            for (var x = 0; x < size; x++) {\r\n                if (field[x] === true) {\r\n                    context.fillStyle = 'green';\r\n                } else if (field[x] === false) {\r\n                    context.fillStyle = 'blue';\r\n                }\r\n                context.fillRect(\r\n                    (canvasDimensions.width / size) * x,\r\n                    (canvasDimensions.height / size) * y,\r\n                    canvasDimensions.width / size - 1,\r\n                    canvasDimensions.height / size - 1\r\n                );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    drawPawns() {\r\n        console.log('draw pawns');\r\n    }\r\n\r\n\r\n\r\n    onMessageRecieved(msg) {\r\n        const message = JSON.parse(msg.body);\r\n        console.log(message, 'recieved');\r\n\r\n        if (message.lobbyId === this.state.lobbyId) {\r\n            if (message.operation === 'START_GAME') {\r\n                this.setState({\r\n                    board: message.fields,\r\n                    pawns: message.pawnList\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    sendMessage = (endPoint, message) => {\r\n        stompClient.send(endPoint, {}, JSON.stringify(message));\r\n        console.log(message, 'SEND');\r\n    }\r\n\r\n    toggle = () => {\r\n        this.sendMessage('/app/game', {\r\n            id: 0,\r\n            username: 'ruudTest'\r\n        });\r\n    }\r\n\r\n    handleMouseClick(e) {\r\n        let x = e.nativeEvent.layerX;\r\n        let y = e.nativeEvent.layerY;\r\n        x = Math.floor(x / 100);\r\n        y = Math.floor(y / 80);\r\n\r\n        this.setState({\r\n            mouseX: x,\r\n            mouseY: y\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header style={{ paddingBottom: '3rem', fontSize: '40px' }}>\r\n                    Online Stratego\r\n                </header>\r\n\r\n                <div className='row' id='left'>\r\n\r\n                </div>\r\n                <div className='row' id='center'>\r\n                    <div className='grid'>\r\n                        <div className='canvasWrapper'>\r\n                            <canvas id='canvasBoard' width={canvasDimensions.width} height={canvasDimensions.height} onMouseDown={this.handleMouseClick.bind(this)} />\r\n                        </div>\r\n                        <div className='canvasWrapper'>\r\n                            <canvas id='canvasPawns' width={canvasDimensions.width} height={canvasDimensions.height} onMouseDown={this.handleMouseClick.bind(this)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='row' id='right'>\r\n                </div>\r\n\r\n\r\n                <button onClick={this.toggle}>\r\n                    toggle\r\n                </button>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","\r\nconst restUrl = 'http://localhost:9000';\r\n\r\n\r\nexport function createUrlToRestApi(location, parameters, values) {\r\n    if (parameters.length !== values.length){\r\n        return 'Parameter and values size does not match.'\r\n    }\r\n\r\n    let url = [];\r\n    url.push(\r\n        restUrl,\r\n        '/',\r\n        location,\r\n        '?'\r\n    );\r\n\r\n    for (let i = 0; i < parameters.length; i++) {\r\n        url.push(\r\n            parameters[i],\r\n            '=',\r\n            values[i],\r\n            '&'\r\n        );\r\n    };\r\n    return url.join('');\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { createUrlToRestApi } from '../scripts/restHandler';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            user: null\r\n        };\r\n\r\n        // Bindings\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        sessionStorage.setItem('lobbyId', '');\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState !== this.state) {\r\n            console.log(this.state);\r\n        }\r\n    }\r\n\r\n    handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    handleLogin() {\r\n        const username = this.state.username;\r\n        const password = this.state.password;\r\n        const url = createUrlToRestApi('login', ['username', 'password'], [username, password]);\r\n\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    user: data\r\n                },\r\n                    () => {\r\n                        console.log(this.state.user, 'user');\r\n                        if (this.state.user.id) {\r\n                            if (this.state.user.id !== 'null') {\r\n                                console.log(this.state)\r\n                                sessionStorage.setItem('user', JSON.stringify(this.state.user));\r\n                                window.location = '/joinlobby';\r\n                            } else {\r\n                                window.alert('Could not find account with those credentials!');\r\n                            }\r\n                        } else {\r\n                            window.alert('Could not fetch user!');\r\n                        }\r\n                    })\r\n            });\r\n    }\r\n\r\n    handleRegister() {\r\n        window.location = '/register';\r\n    }\r\n\r\n    handleChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>\r\n                    Online Stratego\r\n            </header>\r\n\r\n                <Form className='Form' style={{ backgroundColor: 'rgba(235,200,70,0.9)' }}>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='text' id='username' placeholder='Username' autoComplete='username' onChange={this.handleChangeUsername} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='password' placeholder='Password' autoComplete='current-password' onChange={this.handleChangePassword} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.handleLogin} >\r\n                            Login\r\n                        </Button>\r\n                        <Button className='btn btn-warning' onClick={this.handleRegister} >\r\n                            Register new account\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\r\nimport SockJS from \"sockjs-client\";\r\nimport * as Stomp from \"@stomp/stompjs\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { ConnectMessage, GameStartMessage } from '../models/MessageModels';\r\n\r\nlet stompClient = null;\r\n\r\nclass Lobby extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: null,\r\n            lobbyId: null,\r\n            playerList: []\r\n        }\r\n        this.onMessageRecieved = this.onMessageRecieved.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSessionStorage();\r\n        this.connect();\r\n    }\r\n\r\n    getSessionStorage() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user')),\r\n            lobbyId: sessionStorage.getItem('lobbyId')\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(this.state);\r\n    }\r\n\r\n    connect() {\r\n        let _this = this;\r\n        const socket = new SockJS('http://localhost:9000/ws');\r\n        stompClient = Stomp.Stomp.over(socket);\r\n        stompClient.connect({}, function (frame) {\r\n            console.log(frame.toString());\r\n            stompClient.subscribe('/topic/lobby', (message) => {\r\n                _this.onMessageRecieved(message);\r\n            });\r\n            _this.sendMessage('/app/lobby', new ConnectMessage(\r\n                _this.state.user.id,\r\n                _this.state.user.username,\r\n                _this.state.lobbyId\r\n            ))\r\n        });\r\n\r\n    }\r\n\r\n    onMessageRecieved(msg) {\r\n        const message = JSON.parse(msg.body);\r\n        console.log(message, 'recieved');\r\n\r\n        console.log(this.state)\r\n        if (message.receiver === this.state.user.id) {\r\n            if (message.operation === 'NEW_LOBBY') {\r\n                this.setState({\r\n                    lobbyId: message.lobbyId,\r\n                    playerList: message.playerList\r\n                });\r\n\r\n                sessionStorage.setItem('lobbyId', this.state.lobbyId);\r\n            }\r\n        }\r\n\r\n        if (message.lobbyId === this.state.lobbyId) {\r\n            if (message.operation === 'JOINED_LOBBY') {\r\n                this.setState({\r\n                    playerList: message.playerList\r\n                });\r\n\r\n                this.state.playerList.forEach(player => {\r\n                    if (player.id === this.state.user.id) {\r\n                        sessionStorage.setItem('color', player.color);\r\n                    }\r\n                });\r\n            } else if (message.operation === 'START_GAME') {\r\n                window.location = '/game';\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    sendMessage(endPoint, message) {\r\n        stompClient.send(endPoint, {}, JSON.stringify(message));\r\n        console.log(message, 'SEND');\r\n    }\r\n\r\n    getPlayer(i) {\r\n        const player = this.state.playerList[i];\r\n        console.log(player, 'player ' + i);\r\n    }\r\n\r\n    startGame() {\r\n        console.log(this);\r\n        this.sendMessage('/app/lobby/startgame', new GameStartMessage(\r\n            this.state.lobbyId,\r\n            this.state.playerList\r\n        ));\r\n    }\r\n\r\n\r\n    createInfoBlockFromPlayer(i) {\r\n        if (this.state.playerList[i]) {\r\n            const player = this.state.playerList[i];\r\n            let color;\r\n            if (player.color === 'RED') {\r\n                color = 'rgba(200, 0, 0, 0.85';\r\n            } else if (player.color === 'BLUE') {\r\n                color = 'rgba(0, 0, 200, 0.85';\r\n            } else {\r\n                color = 'rgba(235, 200, 70, 0.85';\r\n            }\r\n            return (\r\n                <div className='Form player-info' style={{ backgroundColor: color }}>\r\n                    <p className='player-name'>{player.username}</p>\r\n                    <p className='player-info'>{player.color}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='Form player-info' style={{ backgroundColor: 'rgba(235, 200, 70, 0.85)' }}>\r\n                    <p className='player-name'>Waiting for player..</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <div className='row'>\r\n                    <header className='Header'>Lobby:&nbsp;</header>\r\n                    <header className='lobby-id'>{this.state.lobbyId && this.state.lobbyId}</header>\r\n                </div>\r\n                <div className='container' style={{ width: '60%' }}>\r\n                    <div className='row'>\r\n                        <div className='col-sm'>\r\n                            {this.createInfoBlockFromPlayer(0)}\r\n                        </div>\r\n                        <div className='col-sm'>\r\n                            {this.createInfoBlockFromPlayer(1)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='row' style={{ paddingTop: '1rem' }}>\r\n                        <Button className='btn btn-warning' onClick={this.startGame}>\r\n                            Start Game\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Lobby;","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { createUrlToRestApi } from '../scripts/restHandler';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            user: null\r\n        };\r\n\r\n        // Bindings\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n        this.handleChangePasswordConf = this.handleChangePasswordConf.bind(this);\r\n        this.toLogin = this.toLogin.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState !== this.state) {\r\n            console.log(this.state);\r\n        }\r\n    }\r\n\r\n    handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    handleLogin() {\r\n        window.location = '/';\r\n    }\r\n\r\n    handleRegister() {\r\n        const username = this.state.username;\r\n        const password = this.state.password;\r\n        const passwordConfirmation = this.state.passwordConfirmation;\r\n        \r\n        if (password !== passwordConfirmation){\r\n            window.alert('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        if (username === 'null') {\r\n            window.alert('Username cannot be null.');\r\n            return;\r\n        }\r\n\r\n        const url = createUrlToRestApi('register', ['username', 'password'], [username, password]);\r\n\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                console.log(data, 'data');\r\n                if (data.id !== 'null' || data.username !== 'null') {\r\n                    window.location = '/';\r\n                } else {\r\n                    window.alert('Could not create account! Unkown error.');\r\n                }\r\n            });\r\n    }\r\n\r\n    handleChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePasswordConf(e) {\r\n        this.setState({\r\n            passwordConfirmation: e.target.value\r\n        });\r\n    }\r\n\r\n    toLogin() {\r\n        window.location = '/';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>\r\n                    Online Stratego\r\n            </header>\r\n\r\n                <Form className='Form' style={{ backgroundColor: 'rgba(235,200,70,0.9)' }}>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.toLogin}>\r\n                            Back to login\r\n                        </Button>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='text' id='username' placeholder='Username' onChange={this.handleChangeUsername} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='password' placeholder='Password' autoComplete='new-password' onChange={this.handleChangePassword} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='passwordConf' placeholder='Confirm password' autoComplete='new-password' onChange={this.handleChangePasswordConf} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.handleRegister} >\r\n                            Create account\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\nexport default Register;","import React, { Component } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nclass JoinLobby extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            lobbyId: ''\r\n        }\r\n        \r\n\r\n        // Bindings\r\n        this.changeLobbyId = this.changeLobbyId.bind(this);\r\n        this.createLobby = this.createLobby.bind(this);\r\n        this.joinLobby = this.joinLobby.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(this.state, 'state');\r\n    }\r\n\r\n    getUser(){\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user'))\r\n        });\r\n    }\r\n\r\n    changeLobbyId(e){\r\n        this.setState({\r\n            lobbyId: e.target.value.toUpperCase()\r\n        });\r\n    }\r\n\r\n    createLobby(){\r\n        sessionStorage.setItem('lobbyId', '');\r\n        window.location = '/lobby';\r\n    }\r\n\r\n    joinLobby(){\r\n        const lobbyId = this.state.lobbyId;\r\n        if (lobbyId.length !== 5){\r\n            window.alert('Lobby ID must be 5 characters!');\r\n            return;\r\n        }\r\n        sessionStorage.setItem('lobbyId', this.state.lobbyId);\r\n        window.location = '/lobby';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>Create or join lobby</header>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-sm'>\r\n                            <Button className='btn btn-warning' onClick={this.createLobby}>Create new lobby</Button>\r\n                        </div>\r\n                        <div className='col-sm'>\r\n                            <Form.Group>\r\n                                <Button className='btn btn-warning' onClick={this.joinLobby}>Join a private lobby</Button>\r\n                                <Form.Control className='input upper-case' type='text' id='lobbyId' maxLength='5' placeholder='Lobby ID' onChange={this.changeLobbyId} />\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JoinLobby;","import React from 'react';\nimport './css/bootstrap.css'\nimport './css/bootstrap-grid.css'\nimport './css/App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Lobby from './pages/Lobby';\nimport Register from './pages/Register';\nimport JoinLobby from './pages/joinlobby';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Route path='/' exact component={Login} />\n        <Route path='/register' exact component={Register}/>\n        <Route path='/game' exact component={Game} />\n        <Route path='/lobby' exact component={Lobby}/>\n        <Route path='/joinlobby' exact component={JoinLobby}/>\n      </div>\n    </BrowserRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}