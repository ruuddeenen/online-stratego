{"version":3,"sources":["models/MessageModels.js","pages/Game.js","scripts/restHandler.js","pages/Login.js","pages/Lobby.js","pages/Register.js","pages/joinlobby.js","App.js","serviceWorker.js","index.js","images/pawns/stratego-bomb.webp","images/pawns/stratego-captain.webp","images/pawns/stratego-colonel.webp","images/pawns/stratego-flag.webp","images/pawns/stratego-general.webp","images/pawns/stratego-lieutenant.webp","images/pawns/stratego-major.webp","images/pawns/stratego-marshal.webp","images/pawns/stratego-miner.webp","images/pawns/stratego-scout.webp","images/pawns/stratego-sergeant.webp","images/pawns/stratego-spy.webp","images/grass.png","images/water.png"],"names":["ConnectMessage","id","username","lobbyId","this","GameConnectMessage","color","GameStartMessage","playerList","canvasDimensions","small","medium","big","stompClient","Game","props","connect","_this","socket","SockJS","Stomp","over","subscribe","message","onMessageRecieved","sendMessage","state","user","endPoint","send","JSON","stringify","console","log","opponent","mouseX","mouseY","ready","board","pawns","selectedItem","images","bind","sergeant","createImage","Sergeant","bomb","Bomb","captain","Captain","colonel","Colonel","flag","Flag","general","General","lieutenant","Lieutenant","major","Major","marshal","Marshal","miner","Miner","scout","Scout","spy","Spy","grass","Grass","water","Water","url","image","Image","src","setState","getSessionStorage","getUser","getLobbyId","drawBoard","drawPawns","prevProps","prevState","snapshot","parse","sessionStorage","getItem","canvas","document","getElementById","context","getContext","size","length","width","height","fillStyle","fillRect","y","field","x","drawImage","globalAlpha","beginPath","moveTo","lineTo","stroke","clearRect","i","position","getImage","name","msg","body","receiver","operation","fields","pawnList","e","nativeEvent","layerX","layerY","target","Math","floor","placePawn","selectedName","imageUrl","className","getHeader","createPawnButtons","onMouseDown","handleMouseClick","rows","row","push","Button","style","backgroundImage","getBG","title","getNameFromImport","onClick","selectPawn","item","start","indexOf","end","slice","replace","toUpperCase","pImages","Component","restUrl","createUrlToRestApi","location","parameters","values","join","Login","password","handleLogin","handleRegister","handleChangeUsername","handleChangePassword","setItem","response","ok","Error","statusText","fetch","then","res","json","data","window","alert","value","Form","backgroundColor","Group","Control","type","placeholder","autoComplete","onChange","Lobby","startGame","buttonDisabled","frame","toString","forEach","player","createInfoBlockFromPlayer","paddingTop","Register","handleChangePasswordConf","toLogin","passwordConfirmation","JoinLobby","changeLobbyId","createLobby","joinLobby","maxLength","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.337d8bfd.chunk.js","sourcesContent":["export class ConnectMessage {\r\n    constructor(id, username, lobbyId){\r\n        this.id = id;\r\n        this.username = username;\r\n        this.lobbyId = lobbyId;\r\n    }\r\n}\r\n\r\nexport class GameConnectMessage {\r\n    constructor(id, username, lobbyId, color){\r\n        this.id = id;\r\n        this.username = username;\r\n        this.lobbyId = lobbyId;\r\n        this.color = color;\r\n    };\r\n}\r\n\r\nexport class GameStartMessage {\r\n    constructor(lobbyId, playerList){\r\n        this.lobbyId = lobbyId;\r\n        this.playerList = playerList;\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport SockJS from \"sockjs-client\";\r\nimport * as Stomp from \"@stomp/stompjs\";\r\nimport { GameConnectMessage } from '../models/MessageModels';\r\nimport Grass from '../images/grass.png';\r\nimport Water from '../images/water.png';\r\nimport Bomb from '../images/pawns/stratego-bomb.webp';\r\nimport Captain from '../images/pawns/stratego-captain.webp';\r\nimport Colonel from '../images/pawns/stratego-colonel.webp';\r\nimport Flag from '../images/pawns/stratego-flag.webp';\r\nimport General from '../images/pawns/stratego-general.webp';\r\nimport Lieutenant from '../images/pawns/stratego-lieutenant.webp';\r\nimport Major from '../images/pawns/stratego-major.webp';\r\nimport Marshal from '../images/pawns/stratego-marshal.webp';\r\nimport Miner from '../images/pawns/stratego-miner.webp';\r\nimport Scout from '../images/pawns/stratego-scout.webp';\r\nimport Sergeant from '../images/pawns/stratego-sergeant.webp';\r\nimport Spy from '../images/pawns/stratego-spy.webp';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst canvasDimensions = {\r\n    height: {\r\n        small: 320,\r\n        medium: 640,\r\n        big: 800\r\n    },\r\n    width: {\r\n        small: 400,\r\n        medium: 800,\r\n        big: 1000\r\n    }\r\n};\r\n\r\nlet stompClient = null;\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            opponent: null,\r\n            lobbyId: null,\r\n            color: null,\r\n            mouseX: 0,\r\n            mouseY: 0,\r\n            ready: false,\r\n            board: [],\r\n            pawns: [],\r\n            selectedItem: null,\r\n            images: []\r\n        };\r\n\r\n        // Bindings\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.onMessageRecieved = this.onMessageRecieved.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const images = {\r\n            pawns: {\r\n                sergeant: createImage(Sergeant),\r\n                bomb: createImage(Bomb),\r\n                captain: createImage(Captain),\r\n                colonel: createImage(Colonel),\r\n                flag: createImage(Flag),\r\n                general: createImage(General),\r\n                lieutenant: createImage(Lieutenant),\r\n                major: createImage(Major),\r\n                marshal: createImage(Marshal),\r\n                miner: createImage(Miner),\r\n                scout: createImage(Scout),\r\n                spy: createImage(Spy)\r\n            },\r\n            grass: createImage(Grass),\r\n            water: createImage(Water),\r\n        };\r\n\r\n        this.setState({\r\n            images: images\r\n        });\r\n\r\n        function createImage(url) {\r\n            let image = new Image();\r\n            image.src = url;\r\n            return image;\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getSessionStorage();\r\n        this.getUser();\r\n        this.getLobbyId();\r\n        this.connect();\r\n        this.drawBoard();\r\n        this.drawPawns();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.images) {\r\n            if (this.state.board !== prevState.board) {\r\n                this.drawBoard();\r\n            }\r\n            if (this.state.pawns !== prevState.pawns) {\r\n                this.drawPawns();\r\n            }\r\n        }\r\n        console.log(this.state, 'state update');\r\n    }\r\n\r\n    getSessionStorage() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user')),\r\n            lobbyId: sessionStorage.getItem('lobbyId'),\r\n            color: sessionStorage.getItem('color')\r\n        });\r\n    }\r\n    getUser() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user'))\r\n        });\r\n    }\r\n\r\n    getLobbyId() {\r\n        this.setState({\r\n            lobbyId: sessionStorage.getItem('lobbyId')\r\n        });\r\n    }\r\n\r\n    connect = () => {\r\n        const _this = this;\r\n        const socket = new SockJS('http://localhost:9000/ws');\r\n        stompClient = Stomp.Stomp.over(socket);\r\n        stompClient.connect({}, function () {\r\n            stompClient.subscribe('/topic/game', (message) => {\r\n                _this.onMessageRecieved(message);\r\n            });\r\n            _this.sendMessage('/app/game', new GameConnectMessage(\r\n                _this.state.user.id,\r\n                _this.state.user.username,\r\n                _this.state.lobbyId,\r\n                _this.state.color\r\n            ))\r\n        });\r\n    }\r\n\r\n    drawBoard() {\r\n        const canvas = document.getElementById('canvasBoard');\r\n        const context = canvas.getContext('2d');\r\n        const board = this.state.board;\r\n        const size = board.length;\r\n        const width = canvas.width, height = canvas.height;\r\n\r\n        context.fillStyle = 'black';\r\n        context.fillRect(0, 0, width, height);\r\n        for (var y = 0; y < size; y++) {\r\n            const field = board[y];\r\n            for (var x = 0; x < size; x++) {\r\n                let image;\r\n                if (field[x] === true) {\r\n                    image = this.state.images.grass;\r\n                } else if (field[x] === false) {\r\n                    image = this.state.images.water;\r\n                }\r\n\r\n                context.drawImage(\r\n                    image,\r\n                    (width / size) * x + 1,\r\n                    (height / size) * y + 1,\r\n                    width / size - 1,\r\n                    height / size - 1\r\n                );\r\n\r\n                // Draw colored overlay\r\n                if (y < 4) {\r\n                    context.fillStyle = this.state.opponent.color;\r\n                    context.globalAlpha = 0.4;\r\n                    context.fillRect(\r\n                        (width / size) * x,\r\n                        (height / size) * y,\r\n                        width / size,\r\n                        height / size\r\n                    )\r\n                }\r\n                else if (y > 5) {\r\n                    context.fillStyle = this.state.color;\r\n                    context.globalAlpha = 0.4;\r\n                    context.fillRect(\r\n                        (width / size) * x,\r\n                        (height / size) * y,\r\n                        width / size,\r\n                        height / size\r\n                    )\r\n                }\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n\r\n        // Draw border\r\n        context.beginPath();\r\n        context.moveTo(0, 0);\r\n        context.lineTo(0, height);\r\n        context.lineTo(width, height);\r\n        context.lineTo(width, 0);\r\n        context.lineTo(0, 0);\r\n        context.stroke();\r\n\r\n    }\r\n\r\n    drawPawns() {\r\n        const canvas = document.getElementById('canvasPawns');\r\n        const context = canvas.getContext('2d');\r\n        const board = this.state.board;\r\n        const size = board.length;\r\n        const width = canvas.width, height = canvas.height;\r\n        const pawns = this.state.pawns;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n\r\n        console.log('draw pawns');\r\n\r\n\r\n        for (let i = 0; i < pawns.length; i++) {\r\n            const position = pawns[i].position;\r\n            if (position.x !== -1 || position.y !== -1) {\r\n                console.log('drawing',\r\n                    this.getImage(pawns[i].name),\r\n                    (width / size) * position.x,\r\n                    (height / size) * position.y,\r\n                    width / size,\r\n                    height / size);\r\n\r\n                context.drawImage(\r\n                    this.getImage(pawns[i].name),\r\n                    (width / size) * position.x + 5,\r\n                    (height / size) * position.y + 5,\r\n                    width / size - 10,\r\n                    height / size - 10\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onMessageRecieved(msg) {\r\n        const message = JSON.parse(msg.body);\r\n        console.log(message, 'recieved');\r\n\r\n        if (message.lobbyId === this.state.lobbyId) {\r\n            if (message.receiver === this.state.user.id) {\r\n                if (message.operation === 'START_GAME') {\r\n                    this.setState({\r\n                        board: message.fields,\r\n                        pawns: message.pawnList,\r\n                        opponent: message.opponent\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    sendMessage = (endPoint, message) => {\r\n        stompClient.send(endPoint, {}, JSON.stringify(message));\r\n        console.log(message, 'SEND');\r\n    }\r\n\r\n    handleMouseClick(e) {\r\n        let x = e.nativeEvent.layerX;\r\n        let y = e.nativeEvent.layerY;\r\n        const width = e.target.width;\r\n        const height = e.target.height;\r\n        console.log(x, width);\r\n        console.log(y, height);\r\n        x = Math.floor(x / width * 10);\r\n        y = Math.floor(y / height * 10);\r\n        console.log(x, y);\r\n\r\n        this.setState({\r\n            mouseX: x,\r\n            mouseY: y\r\n        });\r\n\r\n\r\n        // Place pawn\r\n        this.placePawn(this.state.pawns, this.state.selectedItem, x, y);\r\n        this.drawPawns();\r\n    }\r\n\r\n    placePawn(pawnList, selectedName, x, y) {\r\n        for (let i = 0; i < pawnList.length; i++) {\r\n            if (pawnList[i].name === selectedName) {\r\n                if (pawnList[i].position.x === -1 || pawnList[i].position.y === -1) {\r\n                    pawnList[i].position.x = x;\r\n                    pawnList[i].position.y = y;\r\n                    console.log(selectedName, 'placed at', 'x:', x, 'y:', y)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            pawns: pawnList\r\n        });\r\n    }\r\n\r\n    getBG(imageUrl) {\r\n        return 'url(' + imageUrl + ')';\r\n    }\r\n\r\n    selectPawn(selectedItem) {\r\n        console.log(selectedItem, 'selected');\r\n        this.setState({\r\n            selectedItem: selectedItem\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                {this.getHeader()}\r\n                <div className='row'>\r\n                    <div id='left' className='col-md'>\r\n                        {this.createPawnButtons([Flag, Spy, Scout, Miner, Sergeant, Lieutenant, Captain, Major, Colonel, General, Marshal, Bomb])}\r\n                    </div>\r\n                    <div className='center' className='col-md'>\r\n                        <div className='grid'>\r\n                            <div className='canvasWrapper'>\r\n                                <canvas id='canvasBoard' width={canvasDimensions.width.medium} height={canvasDimensions.height.medium} onMouseDown={this.handleMouseClick.bind(this)} />\r\n                            </div>\r\n                            <div className='canvasWrapper'>\r\n                                <canvas id='canvasPawns' width={canvasDimensions.width.medium} height={canvasDimensions.height.medium} onMouseDown={this.handleMouseClick.bind(this)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id='right' className='col-sm'>\r\n                        <canvas id='canvasDefeatedPawns' width={canvasDimensions.width.small} height={canvasDimensions.height.medium}></canvas>\r\n\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n\r\n    getHeader() {\r\n        if (this.state.opponent) {\r\n            const red = 'rgb(200, 0, 0,';\r\n            const blue = 'rgb(0, 0, 200,';\r\n            if (this.state.color === 'RED') {\r\n                return (\r\n                    <div className='row'>\r\n                        <header className='Header red'>{this.state.user.username}</header>\r\n                        <header className='Header'>&nbsp;-&nbsp;</header>\r\n                        <header className='Header blue'>{this.state.opponent.username}</header>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='row'>\r\n                        <header className='Header blue'>{this.state.user.username}</header>\r\n                        <header className='Header'>&nbsp;-&nbsp;</header>\r\n                        <header className='Header red'>{this.state.opponent.username}</header>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return (\r\n                <header className='Header'>\r\n                    Waiting for player..\r\n                </header>\r\n            )\r\n        }\r\n    }\r\n\r\n    createPawnButtons(pawns) {\r\n        let rows = [];\r\n        let i = 0;\r\n        for (let row = 0; row < pawns.length / 2; row++) {\r\n            rows.push(\r\n                <div className='row'>\r\n                    <div className='col-sm'>\r\n                        <Button className='btn-warning pawn' style={{ backgroundImage: this.getBG(pawns[i]) }} title={this.getNameFromImport(pawns[i++])} onClick={e => this.selectPawn(e.target.title)} />\r\n                    </div>\r\n                    <div className='col-sm'>\r\n                        <Button className='btn-warning pawn' style={{ backgroundImage: this.getBG(pawns[i]) }} title={this.getNameFromImport(pawns[i++])} onClick={e => this.selectPawn(e.target.title)} />\r\n                    </div>\r\n                </div>);\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    getNameFromImport(item) {\r\n        const start = item.indexOf('stratego-') + 9;\r\n        const end = item.indexOf('.');\r\n        item = item.slice(start, end);\r\n        item = item.replace(item[0], item[0].toUpperCase());\r\n        return item;\r\n    }\r\n\r\n\r\n\r\n    getImage(name) {\r\n        const pImages = this.state.images.pawns;\r\n        switch (name) {\r\n            case 'Flag': return pImages.flag;\r\n            case 'Spy': return pImages.spy;\r\n            case 'Scout': return pImages.scout;\r\n            case 'Miner': return pImages.miner;\r\n            case 'Sergeant': return pImages.sergeant;\r\n            case 'Marshal': return pImages.marshal;\r\n            case 'Major': return pImages.major;\r\n            case 'Lieutenant': return pImages.lieutenant;\r\n            case 'General': return pImages.general;\r\n            case 'Colonel': return pImages.colonel;\r\n            case 'Captain': return pImages.captain;\r\n            case 'Bomb': return pImages.bomb;\r\n            default: return name + ' did not match any pawn.'\r\n        }\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","\r\nconst restUrl = 'http://localhost:9000';\r\n\r\n\r\nexport function createUrlToRestApi(location, parameters, values) {\r\n    if (parameters.length !== values.length){\r\n        return 'Parameter and values size does not match.'\r\n    }\r\n\r\n    let url = [];\r\n    url.push(\r\n        restUrl,\r\n        '/',\r\n        location,\r\n        '?'\r\n    );\r\n\r\n    for (let i = 0; i < parameters.length; i++) {\r\n        url.push(\r\n            parameters[i],\r\n            '=',\r\n            values[i],\r\n            '&'\r\n        );\r\n    };\r\n    return url.join('');\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { createUrlToRestApi } from '../scripts/restHandler';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            user: null\r\n        };\r\n\r\n        // Bindings\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        sessionStorage.setItem('lobbyId', '');\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState !== this.state) {\r\n            console.log(this.state);\r\n        }\r\n    }\r\n\r\n    handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    handleLogin() {\r\n        const username = this.state.username;\r\n        const password = this.state.password;\r\n        const url = createUrlToRestApi('login', ['username', 'password'], [username, password]);\r\n\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    user: data\r\n                },\r\n                    () => {\r\n                        console.log(this.state.user, 'user');\r\n                        if (this.state.user.id) {\r\n                            if (this.state.user.id !== 'null') {\r\n                                console.log(this.state)\r\n                                sessionStorage.setItem('user', JSON.stringify(this.state.user));\r\n                                window.location = '/joinlobby';\r\n                            } else {\r\n                                window.alert('Could not find account with those credentials!');\r\n                            }\r\n                        } else {\r\n                            window.alert('Could not fetch user!');\r\n                        }\r\n                    })\r\n            });\r\n    }\r\n\r\n    handleRegister() {\r\n        window.location = '/register';\r\n    }\r\n\r\n    handleChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>\r\n                    Online Stratego\r\n            </header>\r\n\r\n                <Form className='Form' style={{ backgroundColor: 'rgba(235,200,70,0.9)' }}>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='text' id='username' placeholder='Username' autoComplete='username' onChange={this.handleChangeUsername} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='password' placeholder='Password' autoComplete='current-password' onChange={this.handleChangePassword} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.handleLogin} >\r\n                            Login\r\n                        </Button>\r\n                        <Button className='btn btn-warning' onClick={this.handleRegister} >\r\n                            Register new account\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\r\nimport SockJS from \"sockjs-client\";\r\nimport * as Stomp from \"@stomp/stompjs\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { ConnectMessage, GameStartMessage } from '../models/MessageModels';\r\n\r\nlet stompClient = null;\r\n\r\nclass Lobby extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: null,\r\n            lobbyId: null,\r\n            playerList: [],\r\n            buttonDisabled: true\r\n        }\r\n\r\n        // Bindings\r\n        this.onMessageRecieved = this.onMessageRecieved.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSessionStorage();\r\n        this.connect();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n    }\r\n\r\n    getSessionStorage() {\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user')),\r\n            lobbyId: sessionStorage.getItem('lobbyId')\r\n        });\r\n    }\r\n\r\n    connect() {\r\n        let _this = this;\r\n        const socket = new SockJS('http://localhost:9000/ws');\r\n        stompClient = Stomp.Stomp.over(socket);\r\n        stompClient.connect({}, function (frame) {\r\n            console.log(frame.toString());\r\n            stompClient.subscribe('/topic/lobby', (message) => {\r\n                _this.onMessageRecieved(message);\r\n            });\r\n            _this.sendMessage('/app/lobby', new ConnectMessage(\r\n                _this.state.user.id,\r\n                _this.state.user.username,\r\n                _this.state.lobbyId\r\n            ))\r\n        });\r\n\r\n    }\r\n\r\n    onMessageRecieved(msg) {\r\n        const message = JSON.parse(msg.body);\r\n        console.log(message, 'recieved');\r\n\r\n        if (message.receiver === this.state.user.id) {\r\n            if (message.operation === 'NEW_LOBBY') {\r\n                this.setState({\r\n                    lobbyId: message.lobbyId,\r\n                    playerList: message.playerList\r\n                });\r\n\r\n                sessionStorage.setItem('lobbyId', this.state.lobbyId);\r\n            }\r\n        }\r\n\r\n        if (message.lobbyId === this.state.lobbyId) {\r\n            if (message.operation === 'JOINED_LOBBY') {\r\n                this.setState({\r\n                    playerList: message.playerList\r\n                });\r\n\r\n                this.state.playerList.forEach(player => {\r\n                    if (player.id === this.state.user.id) {\r\n                        sessionStorage.setItem('color', player.color);\r\n                    }\r\n                });\r\n                if (this.state.playerList.size === 2){\r\n                    this.setState({\r\n                        buttonDisabled: false\r\n                    })\r\n                }\r\n            } else if (message.operation === 'START_GAME') {\r\n                window.location = '/game';\r\n            }\r\n        }\r\n    }\r\n\r\n    sendMessage = (endPoint, message) => {\r\n        stompClient.send(endPoint, {}, JSON.stringify(message));\r\n        console.log(message, 'SEND');\r\n    }\r\n\r\n    startGame = () => {\r\n        if (this.state.playerList.length !== 2){\r\n            window.alert('2 Players are needed for a game!');\r\n            return;\r\n        }\r\n        console.log('start game', this);\r\n        this.sendMessage('/app/lobby/startgame', new GameStartMessage(\r\n            this.state.lobbyId,\r\n            this.state.playerList\r\n        ));\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <div className='row'>\r\n                    <header className='Header'>Lobby:&nbsp;</header>\r\n                    <header className='lobby-id'>{this.state.lobbyId && this.state.lobbyId}</header>\r\n                </div>\r\n                <div className='container' style={{ width: '60%' }}>\r\n                    <div className='row'>\r\n                        <div className='col-sm'>\r\n                            {this.createInfoBlockFromPlayer(0)}\r\n                        </div>\r\n                        <div className='col-sm'>\r\n                            {this.createInfoBlockFromPlayer(1)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='row' style={{ paddingTop: '1rem' }}>\r\n                        <Button className='btn btn-warning' onClick={this.startGame}>\r\n                            Start Game\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    createInfoBlockFromPlayer(i) {\r\n        if (this.state.playerList[i]) {\r\n            const player = this.state.playerList[i];\r\n            let color;\r\n            if (player.color === 'RED') {\r\n                color = 'rgba(200, 0, 0, 0.85';\r\n            } else if (player.color === 'BLUE') {\r\n                color = 'rgba(0, 0, 200, 0.85';\r\n            } else {\r\n                color = 'rgba(235, 200, 70, 0.85';\r\n            }\r\n            return (\r\n                <div className='Form player-info' style={{ backgroundColor: color }}>\r\n                    <p className='player-name'>{player.username}</p>\r\n                    <p className='player-info'>{player.color}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='Form player-info' style={{ backgroundColor: 'rgba(235, 200, 70, 0.85)' }}>\r\n                    <p className='player-name'>Waiting for player..</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Lobby;","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { createUrlToRestApi } from '../scripts/restHandler';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            user: null\r\n        };\r\n\r\n        // Bindings\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n        this.handleChangePasswordConf = this.handleChangePasswordConf.bind(this);\r\n        this.toLogin = this.toLogin.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState !== this.state) {\r\n            console.log(this.state);\r\n        }\r\n    }\r\n\r\n    handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    handleLogin() {\r\n        window.location = '/';\r\n    }\r\n\r\n    handleRegister() {\r\n        const username = this.state.username;\r\n        const password = this.state.password;\r\n        const passwordConfirmation = this.state.passwordConfirmation;\r\n        \r\n        if (password !== passwordConfirmation){\r\n            window.alert('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        if (username === 'null') {\r\n            window.alert('Username cannot be null.');\r\n            return;\r\n        }\r\n\r\n        const url = createUrlToRestApi('register', ['username', 'password'], [username, password]);\r\n\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                console.log(data, 'data');\r\n                if (data.id !== 'null' || data.username !== 'null') {\r\n                    window.location = '/';\r\n                } else {\r\n                    window.alert('Could not create account! Unkown error.');\r\n                }\r\n            });\r\n    }\r\n\r\n    handleChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChangePasswordConf(e) {\r\n        this.setState({\r\n            passwordConfirmation: e.target.value\r\n        });\r\n    }\r\n\r\n    toLogin() {\r\n        window.location = '/';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>\r\n                    Online Stratego\r\n            </header>\r\n\r\n                <Form className='Form' style={{ backgroundColor: 'rgba(235,200,70,0.9)' }}>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.toLogin}>\r\n                            Back to login\r\n                        </Button>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='text' id='username' placeholder='Username' onChange={this.handleChangeUsername} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='password' placeholder='Password' autoComplete='new-password' onChange={this.handleChangePassword} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control className='input' type='password' id='passwordConf' placeholder='Confirm password' autoComplete='new-password' onChange={this.handleChangePasswordConf} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className='btn btn-warning' onClick={this.handleRegister} >\r\n                            Create account\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\nexport default Register;","import React, { Component } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nclass JoinLobby extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            lobbyId: ''\r\n        }\r\n        \r\n\r\n        // Bindings\r\n        this.changeLobbyId = this.changeLobbyId.bind(this);\r\n        this.createLobby = this.createLobby.bind(this);\r\n        this.joinLobby = this.joinLobby.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(this.state, 'state');\r\n    }\r\n\r\n    getUser(){\r\n        this.setState({\r\n            user: JSON.parse(sessionStorage.getItem('user'))\r\n        });\r\n    }\r\n\r\n    changeLobbyId(e){\r\n        this.setState({\r\n            lobbyId: e.target.value.toUpperCase()\r\n        });\r\n    }\r\n\r\n    createLobby(){\r\n        sessionStorage.setItem('lobbyId', '');\r\n        sessionStorage.setItem('color', '');\r\n        window.location = '/lobby';\r\n    }\r\n\r\n    joinLobby(){\r\n        const lobbyId = this.state.lobbyId;\r\n        if (lobbyId.length !== 5){\r\n            window.alert('Lobby ID must be 5 characters!');\r\n            return;\r\n        }\r\n        sessionStorage.setItem('lobbyId', this.state.lobbyId);\r\n        window.location = '/lobby';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Layout'>\r\n                <header className='Header'>Create or join lobby</header>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-sm'>\r\n                            <Button className='btn btn-warning' onClick={this.createLobby}>Create new lobby</Button>\r\n                        </div>\r\n                        <div className='col-sm'>\r\n                            <Form.Group>\r\n                                <Button className='btn btn-warning' onClick={this.joinLobby}>Join a private lobby</Button>\r\n                                <Form.Control className='input upper-case' type='text' id='lobbyId' maxLength='5' placeholder='Lobby ID' onChange={this.changeLobbyId} />\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JoinLobby;","import React from 'react';\nimport './css/bootstrap.css'\nimport './css/bootstrap-grid.css'\nimport './css/App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Lobby from './pages/Lobby';\nimport Register from './pages/Register';\nimport JoinLobby from './pages/joinlobby';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Route path='/' exact component={Login} />\n        <Route path='/register' exact component={Register}/>\n        <Route path='/game' exact component={Game} />\n        <Route path='/lobby' exact component={Lobby}/>\n        <Route path='/joinlobby' exact component={JoinLobby}/>\n      </div>\n    </BrowserRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/stratego-bomb.f4d3b4d8.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-captain.dc2fd759.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-colonel.197e1ee4.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-flag.e14abb9a.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-general.fb480ab3.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-lieutenant.9df8eab2.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-major.92d1a53c.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-marshal.aab1378a.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-miner.94171ebf.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-scout.dc487852.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-sergeant.11eaead2.webp\";","module.exports = __webpack_public_path__ + \"static/media/stratego-spy.90de642a.webp\";","module.exports = __webpack_public_path__ + \"static/media/grass.fac09060.png\";","module.exports = __webpack_public_path__ + \"static/media/water.597de213.png\";"],"sourceRoot":""}